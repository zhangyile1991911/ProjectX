//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.food
{ 

public sealed partial class FoodBaseInfo :  Bright.Config.BeanBase 
{
    public FoodBaseInfo(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  Name = _json["name"]; }
        { var _j = _json["desc"]; if (_j.Tag != JSONNodeType.None && _j.Tag != JSONNodeType.NullValue) { { if(!_j.IsString) { throw new SerializationException(); }  Desc = _j; } } else { Desc = null; } }
        { if(!_json["res_path"].IsString) { throw new SerializationException(); }  ResPath = _json["res_path"]; }
        { if(!_json["type"].IsNumber) { throw new SerializationException(); }  Type = (food.rawType)_json["type"].AsInt; }
        { if(!_json["price"].IsNumber) { throw new SerializationException(); }  Price = _json["price"]; }
        { if(!_json["sell"].IsNumber) { throw new SerializationException(); }  Sell = _json["sell"]; }
        PostInit();
    }

    public FoodBaseInfo(int id, string name, string desc, string res_path, food.rawType type, int price, int sell ) 
    {
        this.Id = id;
        this.Name = name;
        this.Desc = desc;
        this.ResPath = res_path;
        this.Type = type;
        this.Price = price;
        this.Sell = sell;
        PostInit();
    }

    public static FoodBaseInfo DeserializeFoodBaseInfo(JSONNode _json)
    {
        return new food.FoodBaseInfo(_json);
    }

    public int Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 资源路径
    /// </summary>
    public string ResPath { get; private set; }
    public food.rawType Type { get; private set; }
    /// <summary>
    /// 买入价格
    /// </summary>
    public int Price { get; private set; }
    /// <summary>
    /// 卖出价格
    /// </summary>
    public int Sell { get; private set; }

    public const int __ID__ = 466107725;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "ResPath:" + ResPath + ","
        + "Type:" + Type + ","
        + "Price:" + Price + ","
        + "Sell:" + Sell + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
