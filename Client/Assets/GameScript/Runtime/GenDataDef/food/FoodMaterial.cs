//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.food
{ 

public sealed partial class FoodMaterial :  Bright.Config.BeanBase 
{
    public FoodMaterial(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  Name = _json["name"]; }
        { if(!_json["type"].IsNumber) { throw new SerializationException(); }  Type = (food.materialType)_json["type"].AsInt; }
        { var __json0 = _json["tag"]; if(!__json0.IsArray) { throw new SerializationException(); } Tag = new System.Collections.Generic.List<food.flavorTag>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { food.flavorTag __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = (food.flavorTag)__e0.AsInt; }  Tag.Add(__v0); }   }
        { var __json0 = _json["opposite_tag"]; if(!__json0.IsArray) { throw new SerializationException(); } OppositeTag = new System.Collections.Generic.List<food.flavorTag>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { food.flavorTag __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = (food.flavorTag)__e0.AsInt; }  OppositeTag.Add(__v0); }   }
        { if(!_json["collision_layer"].IsNumber) { throw new SerializationException(); }  CollisionLayer = _json["collision_layer"]; }
        PostInit();
    }

    public FoodMaterial(int id, string name, food.materialType type, System.Collections.Generic.List<food.flavorTag> tag, System.Collections.Generic.List<food.flavorTag> opposite_tag, int collision_layer ) 
    {
        this.Id = id;
        this.Name = name;
        this.Type = type;
        this.Tag = tag;
        this.OppositeTag = opposite_tag;
        this.CollisionLayer = collision_layer;
        PostInit();
    }

    public static FoodMaterial DeserializeFoodMaterial(JSONNode _json)
    {
        return new food.FoodMaterial(_json);
    }

    /// <summary>
    /// 食材id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 种类
    /// </summary>
    public food.materialType Type { get; private set; }
    /// <summary>
    /// 标签
    /// </summary>
    public System.Collections.Generic.List<food.flavorTag> Tag { get; private set; }
    /// <summary>
    /// 反标签
    /// </summary>
    public System.Collections.Generic.List<food.flavorTag> OppositeTag { get; private set; }
    /// <summary>
    /// 碰撞层级
    /// </summary>
    public int CollisionLayer { get; private set; }

    public const int __ID__ = -1807969451;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Type:" + Type + ","
        + "Tag:" + Bright.Common.StringUtil.CollectionToString(Tag) + ","
        + "OppositeTag:" + Bright.Common.StringUtil.CollectionToString(OppositeTag) + ","
        + "CollisionLayer:" + CollisionLayer + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
