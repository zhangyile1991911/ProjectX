//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.character
{ 

public sealed partial class CharacterBaseInfo :  Bright.Config.BeanBase 
{
    public CharacterBaseInfo(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  Name = _json["name"]; }
        { if(!_json["desc"].IsString) { throw new SerializationException(); }  Desc = _json["desc"]; }
        { if(!_json["res_path"].IsString) { throw new SerializationException(); }  ResPath = _json["res_path"]; }
        { if(!_json["portrait_path"].IsString) { throw new SerializationException(); }  PortraitPath = _json["portrait_path"]; }
        { var __json0 = _json["like_flavour"]; if(!__json0.IsArray) { throw new SerializationException(); } LikeFlavour = new System.Collections.Generic.List<food.flavorTag>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { food.flavorTag __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = (food.flavorTag)__e0.AsInt; }  LikeFlavour.Add(__v0); }   }
        { var __json0 = _json["unlike_flavour"]; if(!__json0.IsArray) { throw new SerializationException(); } UnlikeFlavour = new System.Collections.Generic.List<food.flavorTag>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { food.flavorTag __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = (food.flavorTag)__e0.AsInt; }  UnlikeFlavour.Add(__v0); }   }
        { if(!_json["main_dialogue"].IsString) { throw new SerializationException(); }  MainDialogue = _json["main_dialogue"]; }
        { if(!_json["comment_dialogue"].IsString) { throw new SerializationException(); }  CommentDialogue = _json["comment_dialogue"]; }
        PostInit();
    }

    public CharacterBaseInfo(int id, string name, string desc, string res_path, string portrait_path, System.Collections.Generic.List<food.flavorTag> like_flavour, System.Collections.Generic.List<food.flavorTag> unlike_flavour, string main_dialogue, string comment_dialogue ) 
    {
        this.Id = id;
        this.Name = name;
        this.Desc = desc;
        this.ResPath = res_path;
        this.PortraitPath = portrait_path;
        this.LikeFlavour = like_flavour;
        this.UnlikeFlavour = unlike_flavour;
        this.MainDialogue = main_dialogue;
        this.CommentDialogue = comment_dialogue;
        PostInit();
    }

    public static CharacterBaseInfo DeserializeCharacterBaseInfo(JSONNode _json)
    {
        return new character.CharacterBaseInfo(_json);
    }

    /// <summary>
    /// npcid
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 资源路径
    /// </summary>
    public string ResPath { get; private set; }
    /// <summary>
    /// 头像路径
    /// </summary>
    public string PortraitPath { get; private set; }
    /// <summary>
    /// 喜欢的口味
    /// </summary>
    public System.Collections.Generic.List<food.flavorTag> LikeFlavour { get; private set; }
    /// <summary>
    /// 讨厌的口味
    /// </summary>
    public System.Collections.Generic.List<food.flavorTag> UnlikeFlavour { get; private set; }
    /// <summary>
    /// 主线剧情
    /// </summary>
    public string MainDialogue { get; private set; }
    /// <summary>
    /// 评价剧情
    /// </summary>
    public string CommentDialogue { get; private set; }

    public const int __ID__ = -1834518077;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "ResPath:" + ResPath + ","
        + "PortraitPath:" + PortraitPath + ","
        + "LikeFlavour:" + Bright.Common.StringUtil.CollectionToString(LikeFlavour) + ","
        + "UnlikeFlavour:" + Bright.Common.StringUtil.CollectionToString(UnlikeFlavour) + ","
        + "MainDialogue:" + MainDialogue + ","
        + "CommentDialogue:" + CommentDialogue + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
